#!/bin/bash

# kubelist - A secure wrapper around kubectl that only allows safe, read-only commands
# Version: 1.0.0
# Author: Created for secure Kubernetes cluster access

set -euo pipefail

# Script metadata
SCRIPT_NAME="kubelist"
VERSION="1.0.0"
KUBECTL_CMD="kubectl"

# Safe commands that are allowed (read-only operations)
SAFE_COMMANDS=(
    "get"
    "describe" 
    "logs"
    "top"
    "version"
    "cluster-info"
    "explain"
    "api-resources"
    "api-versions"
    "port-forward"
)

# Safe subcommands for 'config' command
SAFE_CONFIG_SUBCOMMANDS=(
    "view"
    "get-contexts"
    "current-context"
    "get-clusters"
    "get-users"
)

# Function to display help
show_help() {
    cat << EOF
$SCRIPT_NAME - A secure wrapper around kubectl

USAGE:
    $SCRIPT_NAME [OPTIONS] COMMAND [ARGS...]

DESCRIPTION:
    $SCRIPT_NAME acts as a security layer over kubectl, allowing only safe,
    read-only operations. This prevents accidental or malicious destructive
    operations on your Kubernetes cluster.

SAFE COMMANDS:
    get              Display one or many resources
    describe         Show details of a specific resource or group of resources
    logs             Print the logs for a container in a pod
    top              Display resource (CPU/memory) usage
    version          Print the client and server version information
    cluster-info     Display cluster information
    explain          Get documentation for a resource
    api-resources    Print the supported API resources on the server
    api-versions     Print the supported API versions on the server
    port-forward     Forward one or more local ports to a pod
    config view      Display merged kubeconfig settings
    config get-contexts  Display list of contexts
    config current-context  Display current context
    config get-clusters     Display clusters defined in kubeconfig
    config get-users        Display users defined in kubeconfig

OPTIONS:
    -h, --help       Show this help message
    -v, --version    Show version information

EXAMPLES:
    $SCRIPT_NAME get pods
    $SCRIPT_NAME describe deployment my-app
    $SCRIPT_NAME logs my-pod -c my-container
    $SCRIPT_NAME top nodes

For more information, see the man page: man $SCRIPT_NAME
EOF
}

# Function to display version
show_version() {
    echo "$SCRIPT_NAME version $VERSION"
    echo "Secure kubectl wrapper - allows only safe, read-only operations"
}

# Function to check if a command is safe
is_safe_command() {
    local cmd="$1"
    
    # Check if it's a directly safe command
    for safe_cmd in "${SAFE_COMMANDS[@]}"; do
        if [[ "$cmd" == "$safe_cmd" ]]; then
            return 0
        fi
    done
    
    return 1
}

# Function to check if config subcommand is safe
is_safe_config_command() {
    local subcmd="$1"
    
    for safe_subcmd in "${SAFE_CONFIG_SUBCOMMANDS[@]}"; do
        if [[ "$subcmd" == "$safe_subcmd" ]]; then
            return 0
        fi
    done
    
    return 1
}

# Function to validate and execute kubectl command
execute_kubectl() {
    local args=("$@")
    
    # Check if kubectl is available
    if ! command -v "$KUBECTL_CMD" &> /dev/null; then
        echo "Error: kubectl is not installed or not in PATH" >&2
        exit 1
    fi
    
    # If no arguments provided, show help
    if [[ ${#args[@]} -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    local primary_cmd="${args[0]}"
    
    # Handle special case for 'config' command
    if [[ "$primary_cmd" == "config" ]]; then
        if [[ ${#args[@]} -lt 2 ]]; then
            echo "Error: 'config' command requires a subcommand" >&2
            echo "Safe config subcommands: ${SAFE_CONFIG_SUBCOMMANDS[*]}" >&2
            exit 1
        fi
        
        local config_subcmd="${args[1]}"
        if is_safe_config_command "$config_subcmd"; then
            exec "$KUBECTL_CMD" "$@"
        else
            echo "Error: 'config $config_subcmd' is not allowed" >&2
            echo "Safe config subcommands: ${SAFE_CONFIG_SUBCOMMANDS[*]}" >&2
            exit 1
        fi
    fi
    
    # Check if the primary command is safe
    if is_safe_command "$primary_cmd"; then
        exec "$KUBECTL_CMD" "$@"
    else
        echo "Error: Command '$primary_cmd' is not allowed" >&2
        echo "This command may modify cluster state or perform unsafe operations." >&2
        echo "Safe commands: ${SAFE_COMMANDS[*]}" >&2
        echo "Use 'kubectl' directly if you need to run unsafe commands." >&2
        exit 1
    fi
}

# Main script logic
main() {
    # Handle help and version flags
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        "")
            show_help
            exit 0
            ;;
        *)
            execute_kubectl "$@"
            ;;
    esac
}

# Run main function with all arguments
main "$@"
